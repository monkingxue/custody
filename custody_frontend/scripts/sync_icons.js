const path = require("path")
const fs = require("fs")
const axios = require("axios")
const ProgressBar = require("progress")
const sharp = require("sharp")
const { spawn } = require('child_process')

const IMAGE_SIZE = 128

const COINGECKO_URL =
  "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&per_page=250&page="

const WHITE_LIST = [
  "18c",
  "888",
  "aac",
  "ab",
  "abgs",
  "abl",
  "abs",
  "abt",
  "abyss",
  "acar",
  "ace",
  "act",
  "ada",
  "adc",
  "adx",
  "ae",
  "aergo",
  "aet",
  "aft",
  "agi",
  "aid",
  "aidoc",
  "aion",
  "aiw",
  "akb48",
  "akro",
  "alg",
  "algo",
  "ali",
  "alix",
  "alv",
  "amal",
  "amb",
  "amio",
  "ampl",
  "anb",
  "ankr",
  "ant",
  "ante",
  "ao",
  "aoa",
  "api",
  "appc",
  "aq",
  "ardr",
  "ark",
  "arn",
  "arpa",
  "asrc",
  "ast",
  "at",
  "atf",
  "atmi",
  "atom",
  "atp",
  "att",
  "auc",
  "auto",
  "avt",
  "axa",
  "axe",
  "babt",
  "balic",
  "bar",
  "bat",
  "bata",
  "bbn",
  "bbos",
  "bcc",
  "bcd",
  "bcdn",
  "bch",
  "bci",
  "bcn",
  "bcpt",
  "bcv",
  "bcx",
  "beam",
  "bec",
  "bei",
  "bfc",
  "bft",
  "bgbp",
  "bhd",
  "bht",
  "bhtx",
  "bifi",
  "biki",
  "bitc",
  "bitcny",
  "biut",
  "bix",
  "bkbt",
  "bkc",
  "bkx",
  "bloc",
  "blz",
  "bnb",
  "bnt",
  "bnty",
  "boin",
  "boom",
  "box",
  "bpro",
  "bqcc",
  "bqt",
  "bqx",
  "brc",
  "brd",
  "brst",
  "bsv",
  "bt1",
  "bt2",
  "bta",
  "btc",
  "btcb",
  "btcf0",
  "btf",
  "btfm",
  "btg",
  "btm",
  "bto",
  "bts",
  "btt",
  "btu",
  "bu",
  "buc",
  "but",
  "bxc",
  "bzh",
  "bzj",
  "cai",
  "can",
  "carm",
  "cbe",
  "cbt",
  "cdc",
  "cdt",
  "celr",
  "chat",
  "cic",
  "clo",
  "cloak",
  "cmc",
  "cmt",
  "cnd",
  "cnn",
  "cnns",
  "cocos",
  "cofi",
  "cool",
  "cos",
  "cot",
  "cova",
  "cpc",
  "cpyt",
  "cre",
  "cro",
  "cs",
  "cso",
  "csp",
  "csx",
  "ctxc",
  "cvc",
  "cvcoin",
  "cvnt",
  "cvt",
  "cwv",
  "cxc",
  "czt",
  "dac",
  "dadi",
  "dai",
  "damo",
  "dappt",
  "dash",
  "dat",
  "data",
  "datx",
  "dbc",
  "dch",
  "dcr",
  "ddd",
  "ddmx",
  "dent",
  "det",
  "dgb",
  "dgd",
  "dgg",
  "dgx",
  "dice",
  "dili",
  "dlt",
  "dnt",
  "dock",
  "doge",
  "dogz",
  "dos",
  "dot",
  "dpy",
  "drep",
  "drgn",
  "drn",
  "dta",
  "dth",
  "dtx",
  "dusk",
  "dx",
  "ec",
  "eda",
  "edo",
  "eds",
  "edu",
  "eec",
  "egcc",
  "egt",
  "eke",
  "eko",
  "ekt",
  "ela",
  "elec",
  "elf",
  "em",
  "eng",
  "enj",
  "enu",
  "eos",
  "eosdac",
  "erd",
  "ess",
  "etc",
  "eth",
  "ethf0",
  "eths",
  "etj",
  "etm",
  "etn",
  "etp",
  "etpc",
  "ety",
  "eus",
  "eusdt",
  "eut",
  "evt",
  "evx",
  "fair",
  "fairgame",
  "fc",
  "fcg",
  "fds",
  "fet",
  "fil",
  "fit",
  "fo",
  "foa",
  "for",
  "fsn",
  "fst",
  "ft",
  "ftcoin",
  "fti",
  "ftm",
  "ftn",
  "ftt",
  "fuel",
  "fun",
  "gamc",
  "gard",
  "gas",
  "gc",
  "gdx",
  "gem",
  "gen",
  "get",
  "glo",
  "gmat",
  "gno",
  "gnt",
  "gnx",
  "go",
  "god",
  "got",
  "gpei",
  "grin",
  "grs",
  "gsc",
  "gse",
  "gt",
  "gtc",
  "gto",
  "gtx",
  "gusd",
  "gve",
  "gvt",
  "gxc",
  "gxs",
  "hav",
  "hb10",
  "hc",
  "hds",
  "hey",
  "hic",
  "hit",
  "hive",
  "hl",
  "hmc",
  "hmig",
  "hot",
  "hpb",
  "hpt",
  "hsc",
  "hsn",
  "hsr",
  "ht",
  "hyc",
  "hydro",
  "hyn",
  "ibc",
  "icn",
  "icx",
  "idt",
  "iect",
  "iface",
  "igg",
  "iht",
  "iic",
  "img",
  "imp",
  "ine",
  "ink",
  "inkc",
  "ins",
  "insur",
  "int",
  "ioex",
  "iog",
  "iost",
  "iota",
  "iotx",
  "ipc",
  "iq",
  "iris",
  "ismc",
  "itc",
  "jade",
  "jnt",
  "kan",
  "kcash",
  "kcs",
  "key",
  "kgc",
  "kick",
  "kip",
  "kmd",
  "knc",
  "ktn",
  "lad",
  "lamb",
  "lar",
  "lba",
  "lbtc",
  "lc",
  "lcp",
  "lds",
  "ledu",
  "lemo",
  "lend",
  "leo",
  "let",
  "light",
  "link",
  "llt",
  "lnko",
  "lol",
  "loo",
  "loom",
  "lpt",
  "lrc",
  "lrn",
  "lsc",
  "lsk",
  "ltc",
  "lud",
  "lun",
  "lxt",
  "lym",
  "man",
  "mana",
  "mas",
  "matic",
  "mbl",
  "mco",
  "mda",
  "mds",
  "mdt",
  "med",
  "medx",
  "meet",
  "meetone",
  "met",
  "mex",
  "mft",
  "mgc",
  "mgo",
  "mith",
  "mix",
  "mkr",
  "mln",
  "mmtv",
  "mnc",
  "moac",
  "mobi",
  "mod",
  "mof",
  "mot",
  "mpt",
  "ms",
  "mt",
  "mth",
  "mtl",
  "mtn",
  "mtv",
  "mtx",
  "musk",
  "mut",
  "mvp",
  "mwt",
  "mx",
  "mxc",
  "myc",
  "mycoin",
  "myou",
  "nano",
  "nas",
  "nav",
  "nbot",
  "ncash",
  "ncc",
  "nebl",
  "nec",
  "neo",
  "new",
  "nex",
  "nexo",
  "nfun",
  "nio",
  "nkn",
  "nmst",
  "nnb",
  "nova",
  "npxs",
  "nsc",
  "nss",
  "nuls",
  "nxs",
  "nxt",
  "oath",
  "oax",
  "ocean",
  "ocn",
  "ocv",
  "ode",
  "ods",
  "of",
  "ogo",
  "okb",
  "ole",
  "omg",
  "omn",
  "one",
  "ong",
  "onl",
  "ont",
  "open",
  "optc",
  "orbs",
  "ors",
  "ors group",
  "ost",
  "pai",
  "pas",
  "pax",
  "pay",
  "pc",
  "pcx",
  "perl",
  "phb",
  "phx",
  "pivx",
  "plg",
  "pnk",
  "pnt",
  "poa",
  "poe",
  "poly",
  "poppy",
  "portal",
  "powr",
  "ppt",
  "pra",
  "props",
  "propy",
  "ps",
  "psh",
  "pst",
  "ptt",
  "pvt",
  "qash",
  "qbt",
  "qkc",
  "qlc",
  "qqbc",
  "qsp",
  "qtt",
  "qtum",
  "qun",
  "r",
  "rating",
  "rbt",
  "rbtc",
  "rc",
  "rccc",
  "rcn",
  "rct",
  "rdn",
  "red",
  "ref",
  "reg",
  "rem",
  "ren",
  "rep",
  "req",
  "rfr",
  "rif",
  "rlc",
  "rnt",
  "rpx",
  "rrb",
  "rrt",
  "rrv",
  "rsr",
  "rst",
  "rte",
  "ruff",
  "rvn",
  "salt",
  "san",
  "sbtc",
  "sc",
  "scr",
  "sda",
  "seal",
  "see",
  "seed",
  "seele",
  "seer",
  "sega",
  "sen",
  "senc",
  "sero",
  "sfis",
  "she",
  "shell",
  "show",
  "sht",
  "sjc",
  "skm",
  "skr",
  "sky",
  "smt",
  "snc",
  "snet",
  "sngls",
  "snm",
  "snt",
  "soc",
  "sop",
  "soul",
  "spank",
  "srn",
  "ssc",
  "ssp",
  "stc",
  "steem",
  "stk",
  "storj",
  "storm",
  "strat",
  "stx",
  "sub",
  "swag",
  "swap",
  "swftc",
  "swm",
  "swth",
  "sys",
  "tct",
  "tde",
  "tds",
  "tera",
  "tfuel",
  "tgic",
  "thbc",
  "theta",
  "thp",
  "tic",
  "tipo",
  "tips",
  "tkn",
  "tnb",
  "tnc",
  "tnk",
  "tnt",
  "tocc",
  "tomo",
  "ton",
  "top",
  "topc",
  "tos",
  "tosp",
  "tps",
  "tpt",
  "tra",
  "tri",
  "trig",
  "trio",
  "trtl",
  "true",
  "trx",
  "tsl",
  "tsr",
  "tt",
  "ttfd",
  "tusd",
  "tusdb",
  "tusdt",
  "twj",
  "tyd",
  "tyt",
  "ubtc",
  "uc",
  "ucns",
  "uct",
  "ufr",
  "ugas",
  "ugc",
  "uid",
  "uip",
  "ulam",
  "uos",
  "usdc",
  "usds",
  "usdsb",
  "usdt",
  "usk",
  "utk",
  "utnp",
  "uuu",
  "uzt",
  "vbt",
  "vds",
  "vdx",
  "vee",
  "ven",
  "vet",
  "vgo",
  "via",
  "vib",
  "vibe",
  "vidy",
  "vite",
  "vld",
  "vnc",
  "vnt",
  "voken",
  "vol",
  "vsys",
  "vtho",
  "wabi",
  "wan",
  "waves",
  "wax",
  "wbt",
  "wecf",
  "wen",
  "wfee",
  "wicc",
  "win",
  "wings",
  "wiot",
  "wlo",
  "wpr",
  "wtc",
  "wxt",
  "xas",
  "xbbc",
  "xc",
  "xchf",
  "xem",
  "xlm",
  "xmc",
  "xmr",
  "xmx",
  "xpx",
  "xra",
  "xrp",
  "xtz",
  "xuc",
  "xvg",
  "xys",
  "xzc",
  "ycc",
  "yec",
  "yee",
  "ygg",
  "ykc",
  "you",
  "yoyow",
  "ysdt",
  "yst",
  "yta",
  "zb",
  "zbt",
  "zcn",
  "zco",
  "zec",
  "zel",
  "zen",
  "zil",
  "zip",
  "zjlt",
  "zla",
  "zos",
  "zpt",
  "zrx",
  "zsc",
  "zvc",
  "wecf",
  "iota",
  "sda",
  "rpx",
  "bar",
  "swag",
  "cxc",
  "bfc",
  "tsr",
  "aft",
  "cvcoin",
  "rbt"
]

/* Sample data
{
  "id": "bitcoin",
  "symbol": "btc",
  "name": "Bitcoin",
  "image": "https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579",
  "current_price": 3537.78329325023,
  "market_cap": 61901608563.6021,
  "market_cap_rank": 1,
  "total_volume": 2521357226.61728,
  "high_24h": 3549.17558751314,
  "low_24h": 3503.84579010285,
  "price_change_24h": -0.0864963745939349,
  "price_change_percentage_24h": -0.00244487162437676,
  "market_cap_change_24h": -2451272.58293915,
  "market_cap_change_percentage_24h": -0.00395979292703238,
  "circulating_supply": "17494450.0",
  "total_supply": 21000000,
  "ath": 19665.3949272416,
  "ath_change_percentage": -81.9734539091528,
  "ath_date": "2017-12-16T00:00:00.000Z",
  "roi": null,
  "last_updated": "2019-01-22T02:50:18.267Z"
}
 */

let items = []

let bar

let currentPage = 1

let coinsList = []

let imageDir = path.join(process.env.HOME, "Downloads/currency_icons")
if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir)
}

const downloadJson = () => {
  let jsonPath = path.join(imageDir, "_list.json")

  if (fs.existsSync(jsonPath)) {
    fs.readFile(jsonPath, (err, data) => {
      if (err) console.error(err.toLocaleString())
      else {
        items = JSON.parse(data)
        startDownload()
        return
      }
    })
  } else {
    console.log("Loading market data... Page #" + currentPage)
    axios.request({ url: COINGECKO_URL + currentPage }).then(result => {
      if (result.data.length >= 250) {
        items = items.concat(result.data)
        currentPage++
        downloadJson()
      } else if (result.data.length > 0) {
        items = items.concat(result.data)

        coinsList = items.map(item => {
          return {
            "symbol": item.symbol.toLowerCase(),
            "name": item.name,
            "image": item.image.replace(/\?\d+$/g, "")
          }
        })
        fs.writeFileSync(jsonPath, JSON.stringify(coinsList, null, 2))

        startDownload()
      }
    })
  }
}

const startDownload = () => {
  console.log(`Found ${items.length} symbols.`)
  console.log("Downloading icons...")
  bar = new ProgressBar(":current/:total :bar :percent :eta", {
    total: WHITE_LIST.length
  })
  enqueueDownload()
}

const enqueueDownload = async () => {
  for (let i = 0; i < WHITE_LIST.length; i++) {
    let item = items.filter(item => {
      return item.symbol.toLowerCase() === WHITE_LIST[i]
    })

    if (item.length === 0) continue

    await downloadIcon(item[0])

    bar.tick()
  }
  openFolder()
  imageOptimize()
}

const downloadIcon = async (item) => {
  let imagePath = path.join(imageDir, `${item.symbol.toLowerCase()}.png`)

  if (fs.existsSync(imagePath)) {
    return async () => {}
  }

  return axios
    .request({
      responseType: "arraybuffer",
      url: item.image,
      method: "get"
    })
    .then(result => {
      return sharp(result.data)
        .resize(IMAGE_SIZE, IMAGE_SIZE)
        .toFile(imagePath, (err, info) => {
          if (err) console.error(err)
        })
    })
    .catch(err => {
      // console.error(`Failed to download icon of ${item.symbol.toUpperCase()}`)
    })
}

const openFolder = () => {
  spawn('open', [imageDir])
}

// https://imageoptim.com/command-line.html
const imageOptimize = () => {
  spawn('open', [
    '-a',
    'ImageOptim',
    imageDir
  ])
}

const syncToS3 = () => {
  spawn('aws', [
    's3',
    'sync',
    imageDir,
    's3://abtc-asset-icon'
  ])
}

downloadJson()
